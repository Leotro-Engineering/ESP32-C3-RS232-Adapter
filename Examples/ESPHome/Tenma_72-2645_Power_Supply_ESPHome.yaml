esphome:
  name: tenma-72-2645
  friendly_name: Tenma 72-2645

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:
  level: DEBUG  # Set logging level to DEBUG to read UART

# Enable Home Assistant API
api:
  encryption:
    key: "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

ota:
  - platform: esphome
    password: "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "tenma-72-2645"
    password: "XXXXXXXXXXXX"

captive_portal:

uart:
  id: uart_sensor
  tx_pin: GPIO10
  rx_pin: GPIO04
  baud_rate: 9600
  parity: NONE
  stop_bits: 1
  data_bits: 8

  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r"
    sequence:
      - lambda: |-
          static int expecting_channel = 0;
          static bool expecting_voltage = false;
          static bool expecting_current = false;

          if (bytes.size() > 0) {
            std::string response(bytes.begin(), bytes.end());

            // Track which query we sent
            if (response.find("VOUT1?") != std::string::npos) {
              expecting_channel = 1;
              expecting_voltage = true;
              expecting_current = false;
            } else if (response.find("IOUT1?") != std::string::npos) {
              expecting_channel = 1;
              expecting_voltage = false;
              expecting_current = true;
            } else if (response.find("VOUT2?") != std::string::npos) {
              expecting_channel = 2;
              expecting_voltage = true;
              expecting_current = false;
            } else if (response.find("IOUT2?") != std::string::npos) {
              expecting_channel = 2;
              expecting_voltage = false;
              expecting_current = true;
            } else {
              // Attempt to parse the value
              float value = 0.0f;
              const char* str = response.c_str();
              char* endptr;
              value = strtof(str, &endptr);

              // If successfully parsed, classify it based on the last command
              if (*endptr == '\0') {
                if (expecting_voltage) {
                  if (expecting_channel == 1) {
                    id(ch1_output_voltage).publish_state(value);
                  } else if (expecting_channel == 2) {
                    id(ch2_output_voltage).publish_state(value);
                  }
                } else if (expecting_current) {
                  if (expecting_channel == 1) {
                    id(ch1_output_current).publish_state(value);
                  } else if (expecting_channel == 2) {
                    id(ch2_output_current).publish_state(value);
                  }
                } else {
                }
                // Reset expectations
                expecting_channel = 0;
                expecting_voltage = false;
                expecting_current = false;
              } 
            }
          } 

switch:
  - platform: template
    name: "Lock"
    id: lock_switch
    optimistic: true
    turn_on_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - uart.write:
          id: uart_sensor
          data: "LOCK1"
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"
    turn_off_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - uart.write:
          id: uart_sensor
          data: "LOCK0"
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"

  - platform: template
    name: "Output"
    id: output_switch
    optimistic: true
    turn_on_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - uart.write:
          id: uart_sensor
          data: "OUT1"
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"
    turn_off_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - uart.write:
          id: uart_sensor
          data: "OUT0"
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"

select:
  - platform: template
    name: "Track"
    id: track
    optimistic: true
    options:
    - "Independent"
    - "Series"
    - "Parallel"
    initial_option: "Independent"
    on_value:
      then:
      - if:
          condition:
            lambda: |-
              return (id(track).active_index() == 0);
          then:
            - globals.set:
                id: uart_locked
                value: "true"
            - delay: 125ms
            - switch.turn_off: output_switch
            - uart.write:
                id: uart_sensor
                data: "TRACK0"
            - delay: 125s
            - globals.set:
                id: uart_locked
                value: "false"
      - if:
          condition:
            lambda: |-
              return (id(track).active_index() == 1);
          then:
            - globals.set:
                id: uart_locked
                value: "true"
            - delay: 125ms
            - switch.turn_off: output_switch
            - uart.write:
                id: uart_sensor
                data: "TRACK1"
            - delay: 125ms
            - globals.set:
                id: uart_locked
                value: "false"
      - if:
          condition:
            lambda: |-
              return (id(track).active_index() == 2);
          then:
            - globals.set:
                id: uart_locked
                value: "true"
            - delay: 125ms
            - switch.turn_off: output_switch
            - uart.write:
                id: uart_sensor
                data: "TRACK2"
            - delay: 125ms
            - globals.set:
                id: uart_locked
                value: "false"

number:
  - platform: template
    name: "Set CH1 Voltage"
    id: set_ch1_voltage
    icon: "mdi:flash"
    unit_of_measurement: "V"
    min_value: 0
    max_value: 30
    step: 0.01
    optimistic: true
    set_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - lambda: |-
          char command[20];
          snprintf(command, sizeof(command), "VSET1:%5.2f", x);
          id(uart_sensor).write_str(command);
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"

  - platform: template
    name: "Set CH1 Current"
    id: set_ch1_current
    icon: "mdi:current-dc"
    unit_of_measurement: "A"
    min_value: 0
    max_value: 5
    step: 0.001
    optimistic: true
    set_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - lambda: |-
          char command[20];
          snprintf(command, sizeof(command), "ISET1:%5.3f", x);
          id(uart_sensor).write_str(command);
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"

  - platform: template
    name: "Set CH2 Voltage"
    id: set_ch2_voltage
    icon: "mdi:flash"
    unit_of_measurement: "V"
    min_value: 0
    max_value: 30
    step: 0.01
    optimistic: true
    set_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - lambda: |-
          char command[20];
          snprintf(command, sizeof(command), "VSET2:%5.2f", x);
          id(uart_sensor).write_str(command);
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"

  - platform: template
    name: "Set CH2 Current"
    id: set_ch2_current
    icon: "mdi:current-dc"
    unit_of_measurement: "A"
    min_value: 0
    max_value: 5
    step: 0.001
    optimistic: true
    set_action:
      - globals.set:
          id: uart_locked
          value: "true"
      - delay: 125ms
      - lambda: |-
          char command[20];
          snprintf(command, sizeof(command), "ISET2:%5.3f", x);
          id(uart_sensor).write_str(command);
      - delay: 125ms
      - globals.set:
          id: uart_locked
          value: "false"

sensor:
  - platform: template
    name: "CH1 Output Voltage"
    id: ch1_output_voltage
    icon: "mdi:flash"
    unit_of_measurement: "V"
    accuracy_decimals: 2

  - platform: template
    name: "CH1 Output Current"
    id: ch1_output_current
    icon: "mdi:current-dc"
    unit_of_measurement: "A"
    accuracy_decimals: 3

  - platform: template
    name: "CH2 Output Voltage"
    id: ch2_output_voltage
    icon: "mdi:flash"
    unit_of_measurement: "V"
    accuracy_decimals: 2

  - platform: template
    name: "CH2 Output Current"
    id: ch2_output_current
    icon: "mdi:current-dc"
    unit_of_measurement: "A"
    accuracy_decimals: 3

globals:
  - id: uart_locked
    type: bool
    restore_value: no
    initial_value: "false"

interval:
  - interval: 125ms
    then:
      - if:
          condition:
            lambda: 'return !id(uart_locked);'
          then:
            - lambda: |-
                static int counter = 0;
                const char* data[] = {"VOUT1?", "IOUT1?", "VOUT2?", "IOUT2?"};
                char command[20];
                snprintf(command, sizeof(command), "%s", data[counter]);
                id(uart_sensor).write_str(command);
                counter = (counter + 1) % 4;  
    